git 
{
	$mkdir *	创建文件夹
	$cd *		到指定路径
	$pwd		显示当前目录
}
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$git init						将这个目录变成git管理的仓库
$git add *						将文件添加到仓库
$git commit -m "这里写注释"		提交修改
$git status 					检查仓库状态
$git diff						检查修改内容
$git reset --hard commit_id		回退到指定版本号(HEAD指向当前版本，HEAD^指向上一个版本)
$git log 						查看提交历史
$git reflog						查看历史命令

将文件添加到git版本库分两步
{
	1.git add 		把文件修改添加到暂存区(stage)
	2.git commit 	把暂存区的所有内容提交到当前分支
	创建GIT版本库时，Git自动为我们创建了唯一的一个master
	所以git commit就是往master分支上提交更改
	做出修改之后 未add到暂存区stage中 则不会将修改提交commit
	只有add后会成功提交修改
}
git撤销
{
	git checkout -- <file>	修改文件后 未add 撤销(工作区修改)	
	
	git reset HEAD <file>	修改文件后 已add 未commit 将暂存区数据回退到工作区
	git checkout -- <file>	  撤销工作区修改(HEAD表示最新版本)
}
git 删除
{
	rm <file>					删除工作区文件(添加到暂存区(版本库))
		git checkout -- <file>	误删工作区文件，将版本库中的文件替换到工作区
	git rm <file>	
		git commmit -m <file>	删除暂存区(版本库)中的文件
}

远程SSH仓库
{
	$ ssh-keygen -t rsa -C "youremail@example.com"		生成私人和对公密钥
}


创建号github上的git仓库后 在本地仓库下写入
{
	 git remote add origin git@github.com:wuxing1995/study.git	关联远程链接库
	 git push origin master		将本地库的内容推送到远程
}
在github上创建仓库克隆到本地
{
	git clone git@github.com:wuxing1995/gitskills.git	
	22port错误：主机目录下 vim .ssh/config
	插入：	 
		Host github.com  
		User 1521761498@qq.com  
		Hostname ssh.github.com  
		PreferredAuthentications publickey  
		IdentityFile ~/.ssh/id_rsa  
		Port 443
	或者修改
	git config --global url."https://github.com/".insteadOf git@github.com:
	测试：
		ssh -T git@github.com  
	用vim更改config
	{
		1、创建、打开文件：$ vi [filename]
		（1）使用 vi 加 文件路径（或文件名）的模式打开文件，如果文件存在则打开现有文件，如果文件不存在则新建文件，并在终端最下面一行显示打开的是一个新文件。
		（2）键盘输入字母 “i”或“Insert”键进入最常用的插入编辑模式。
		2、保存文件：
		（1）在插入编辑模式下编辑文件。
				复制/粘贴键入：p；
		（2）按下 “ESC” 键，退出编辑模式，切换到命令模式。
		（3）在命令模式下键入"ZZ"或者":wq"保存修改并且退出 vi 。
		（4）如果只想保存文件，则键入":w"，回车后底行会提示写入操作结果，并保持停留在命令模式。
		3、放弃所有文件修改：
		（1）放弃所有文件修改：按下 "ESC" 键进入命令模式，键入 ":q!" 回车后放弃修改并退出vi。
		（2）放弃所有文件修改，但不退出 vi ，即回退到文件打开后最后一次保存操作的状态，继续进行文件操作：按下 "ESC" 键进入命令模式，键入 ":e!" ，回车后回到命令模式。
	}
}
